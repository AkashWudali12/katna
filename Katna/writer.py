import cv2
import os
import ntpath

class Writer:
    """The base class for writer to process data. 
    Extend the class to implement different writers based on requirement. 
    """

    def _generate_filename_from_filepath(self, filepath):
        """Retreives filename from its path on disk

        :param filepath: Path of file on disk
        :type filepath: str
        :return: name of the file
        :rtype: str
        """
        input_filepath = ntpath.basename(filepath)
        input_filename = input_filepath.split(".")[0]

        return input_filename

    def generate_output_filename(self, filepath, keyframe_number):
        """Generates the output filename given the filepath and keyframe number.

        :param filepath: filepath of the original input file
        :type filepath: str
        :param keyframe_number: keyframe number
        :type keyframe_number: int
        :return: filename
        :rtype: str
        """

        return self._generate_filename_from_filepath(filepath)

    
    def write(self, filepath, data):
        """The writer logic for processing the keyframes for the file @ filepath

        :param filepath: Absolute file path
        :type filepath: str
        :param data: Data generated by Katna library for the file @ filepath
        :type data: list
        """
        pass
    


class DiskWriterKeyFrame(Writer):
    """Writes the keyframe data to the disk

    :param BaseWriter: [description]
    :type BaseWriter: [type]
    """
    def __init__(self, location, file_ext=".jpeg"):
        """Initalizes the file extension of the output file and location of output directory.

        :param location: [description]
        :type location: [type]
        :param file_ext: [description], defaults to ""
        :type file_ext: str, optional
        """
        self.output_dir_path = location
        self.file_ext = file_ext
        self._create_dir(location)

    def _create_dir(self, dir_path):
        """Creates directory given the directory path.

        :param path: path to output directory
        :type path: str
        """

        if not os.path.isdir(os.path.join(".", dir_path)):
            os.mkdir(os.path.join(".", dir_path))

    def generate_output_filename(self, filepath, keyframe_number):
        """Generates the filename of output data file.

        :param filepath: filepath of the input file
        :type filepath: str
        """

        file_name_arr = []
        input_file_name = self._generate_filename_from_filepath(filepath)

        # append the input filename
        file_name_arr.append(input_file_name)

        # append the keyframe number
        file_name_arr.append(str(keyframe_number))
        
        # join the name using _ 
        filename = "_".join(file_name_arr)
        
        return filename


    def save_frame_data_to_disk(self, frame, file_name, file_ext):
        """Saves the keyframe data to the disk at ouutput directory path set at
        initialization.

        :param frame: frame data to be written
        :type frame: np.array
        :param file_name: Name of the file
        :type file_name: str
        :param file_ext: extension of the file (.jpg, .jpeg)
        :type file_ext: str
        """

        file_full_path = os.path.join(self.output_dir_path, file_name + file_ext)
        cv2.imwrite(file_full_path, frame)

    def write(self, filepath, data):
        """Write the data generated by Katna library for file @ filepath on to the disk.

        :param filepath: path of the input file processed by Katna
        :type filepath: str
        :param data: data generated using Katna library
        :type data: list
        """

        for counter, img in enumerate(data):
            output_filename = self.generate_output_filename(filepath, keyframe_number=counter)
            self.save_frame_data_to_disk(img, file_name=output_filename, file_ext=self.file_ext)